    # -*- coding: utf-8 -*-
"""
===============================================================================
Created on    : Sat Aug 24 01:11:44 2019
Author        : Alejandro Martínez León
Mail          : [amleon@instec.cu, ale94mleon@gmail.com]
Affiliation   : Chemical Systems Modeling Group,
Affiliation   : Faculty of Radiochemistry, InSTEC-University of Havana, Cuba.
===============================================================================
DESCRIPTION   :
DEPENDENCIES  :
===============================================================================
"""


import numpy as np
import rmsd
import pandas as pd
import glob as glob

arc = glob.glob('*.arc')[0]
xyz=open(arc.split('.')[0]+'.xyz','w')


with open(arc, 'rt') as a:
    lines = a.readlines()
 
def arc_reader (arcf):
    with open(arcf, 'rt') as a:
        lines = a.readlines()

    for line in lines:
        if 'Empirical Formula' in line:
            natoms = int(line.split()[-2])
            break
    
    CONTAINER = []

    cart = []

    atoms = []
    for i, line in enumerate(lines):    
        if ('FINAL GEOMETRY OBTAINED' in line):
            chunk = lines[i+4:i+4+natoms]
            cart = []
            atoms = []
            for c in chunk:
                atoms.append(c.split()[0])
                cart.append([float(c.split()[1]), float(c.split()[3]), float(c.split()[5])])
            CONTAINER.append(np.asarray(pd.DataFrame(cart)))
    # .... organizing
    paired = list(zip([atoms]*len(CONTAINER), CONTAINER)) # Esto genera un arreglo de tuplas, me une los arreglos
    return paired

   
data = arc_reader(arc)


p_all = data[0][1] 

   
for i, item in enumerate(data):
    RMSD = rmsd.kabsch_rotate(p_all, data[i][1])
    
    DF = pd.DataFrame(columns=['atoms', 'X', 'Y', 'Z'])
    X = [RMSD[i][0] for i, x in enumerate(RMSD)]
    Y = [RMSD[i][1] for i, x in enumerate(RMSD)]
    Z = [RMSD[i][2] for i, x in enumerate(RMSD)]

    DF['atoms'] = data[i][0]
    DF['X'] = X
    DF['Y'] = Y
    DF['Z'] = Z

    xyz.write('%d\n %s\n' % (len(data[i][0]), 'generated by ALEIMI'))
    DF.to_string(header=False, index=False)
    xyz.write('\n')
    DF.to_string(xyz, header = False, index=False)
    xyz.write('\n')




xyz.close

